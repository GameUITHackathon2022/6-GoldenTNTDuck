{"ast":null,"code":"import * as React from 'react';\nimport { useTheme as useSystemTheme } from '@mui/system';\nimport defaultTheme from './defaultTheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst VariantOverride = /*#__PURE__*/React.createContext(undefined);\nexport const useColorInversion = childVariant => {\n  const overriableVariants = React.useContext(VariantOverride);\n  return {\n    getColor: (instanceColorProp, defaultColorProp) => {\n      if (overriableVariants && childVariant) {\n        if (overriableVariants.includes(childVariant)) {\n          // @ts-ignore internal logic\n          return instanceColorProp || 'context';\n        }\n      }\n      // @ts-ignore internal logic\n      return instanceColorProp || defaultColorProp;\n    }\n  };\n};\nexport function ColorInversionProvider(_ref) {\n  let {\n    children,\n    variant\n  } = _ref;\n  const theme = useSystemTheme(defaultTheme);\n  return /*#__PURE__*/_jsx(VariantOverride.Provider, {\n    value: variant ? theme.colorInversionConfig[variant] : undefined,\n    children: children\n  });\n}\nexport default VariantOverride;","map":{"version":3,"names":["React","useTheme","useSystemTheme","defaultTheme","jsx","_jsx","VariantOverride","createContext","undefined","useColorInversion","childVariant","overriableVariants","useContext","getColor","instanceColorProp","defaultColorProp","includes","ColorInversionProvider","children","variant","theme","Provider","value","colorInversionConfig"],"sources":["/home/hoaithi/git/uit/uit-hackathon-main-template/node_modules/@mui/joy/styles/ColorInversion.js"],"sourcesContent":["import * as React from 'react';\nimport { useTheme as useSystemTheme } from '@mui/system';\nimport defaultTheme from './defaultTheme';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst VariantOverride = /*#__PURE__*/React.createContext(undefined);\nexport const useColorInversion = childVariant => {\n  const overriableVariants = React.useContext(VariantOverride);\n  return {\n    getColor: (instanceColorProp, defaultColorProp) => {\n      if (overriableVariants && childVariant) {\n        if (overriableVariants.includes(childVariant)) {\n          // @ts-ignore internal logic\n          return instanceColorProp || 'context';\n        }\n      }\n      // @ts-ignore internal logic\n      return instanceColorProp || defaultColorProp;\n    }\n  };\n};\nexport function ColorInversionProvider({\n  children,\n  variant\n}) {\n  const theme = useSystemTheme(defaultTheme);\n  return /*#__PURE__*/_jsx(VariantOverride.Provider, {\n    value: variant ? theme.colorInversionConfig[variant] : undefined,\n    children: children\n  });\n}\nexport default VariantOverride;"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,IAAIC,cAAc,QAAQ,aAAa;AACxD,OAAOC,YAAY,MAAM,gBAAgB;AACzC,SAASC,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,MAAMC,eAAe,GAAG,aAAaN,KAAK,CAACO,aAAa,CAACC,SAAS,CAAC;AACnE,OAAO,MAAMC,iBAAiB,GAAGC,YAAY,IAAI;EAC/C,MAAMC,kBAAkB,GAAGX,KAAK,CAACY,UAAU,CAACN,eAAe,CAAC;EAC5D,OAAO;IACLO,QAAQ,EAAE,CAACC,iBAAiB,EAAEC,gBAAgB,KAAK;MACjD,IAAIJ,kBAAkB,IAAID,YAAY,EAAE;QACtC,IAAIC,kBAAkB,CAACK,QAAQ,CAACN,YAAY,CAAC,EAAE;UAC7C;UACA,OAAOI,iBAAiB,IAAI,SAAS;QACvC;MACF;MACA;MACA,OAAOA,iBAAiB,IAAIC,gBAAgB;IAC9C;EACF,CAAC;AACH,CAAC;AACD,OAAO,SAASE,sBAAsB,OAGnC;EAAA,IAHoC;IACrCC,QAAQ;IACRC;EACF,CAAC;EACC,MAAMC,KAAK,GAAGlB,cAAc,CAACC,YAAY,CAAC;EAC1C,OAAO,aAAaE,IAAI,CAACC,eAAe,CAACe,QAAQ,EAAE;IACjDC,KAAK,EAAEH,OAAO,GAAGC,KAAK,CAACG,oBAAoB,CAACJ,OAAO,CAAC,GAAGX,SAAS;IAChEU,QAAQ,EAAEA;EACZ,CAAC,CAAC;AACJ;AACA,eAAeZ,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}